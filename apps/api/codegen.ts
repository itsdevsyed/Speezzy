import type { CodegenConfig } from '@graphql-codegen/cli'; // Corrected: CodegenConfig with capital 'C'
import { join } from 'path';

const config: CodegenConfig = { // Also use CodegenConfig here
  overwrite: true,
  // Points to the schema file automatically generated by NestJS
  schema: join(process.cwd(), 'src/schema.gql'),
  generates: {
    // 1. Generate types for your Backend (NestJS Resolvers)
    // These types help ensure your backend resolvers match your schema.
    './src/graphql.ts': { // Output path relative to apps/api
      plugins: ['typescript', 'typescript-resolvers'],
      config: {
        useIndexSignature: true, // Recommended for better type safety
        // contextType: './src/auth/auth.service#AuthService', // Example if you have custom GraphQL context
      },
    },
    // 2. Generate types for your Frontends (Web & Mobile)
    // These types are consumed by Apollo Client in Next.js and Flutter (via separate steps).
    // This output path is CRUCIAL: it points directly into your shared types package.
    '../../packages/types/src/graphql.ts': { // Output path relative to apps/api
      plugins: ['typescript', 'typescript-operations'],
      config: {
        skipTypename: true, // Often desired for frontend types
        enumsAsTypes: true, // Generates TypeScript 'type' aliases for enums
        // Add any common fragments here if you have them across multiple queries
        // fragments: {
        //   // Use this if you want to define common GraphQL fragments
        //   // in a shared .graphql file and generate types for them.
        // },
      },
    },
  },
  hooks: {
    // After all files are generated, tell pnpm to build the @speezzy/types package.
    // This ensures the compiled JavaScript and .d.ts files are up-to-date.
    afterAllFileWrite: ['pnpm --filter @speezzy/types build'],
  },
};

export default config;
